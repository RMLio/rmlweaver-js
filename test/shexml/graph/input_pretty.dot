digraph {
    0 [ label = "id:Source_0 \lSource Operator\ltype: File \lreference iterator: Iterator {\l    reference: None,\l    reference_formulation: CSVRows,\l    fields: [\l        Field {\l            alias: \"id\",\l            reference: \"id\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l        Field {\l            alias: \"name\",\l            reference: \"name\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l        Field {\l            alias: \"year\",\l            reference: \"year\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l        Field {\l            alias: \"country\",\l            reference: \"country\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l        Field {\l            alias: \"directors\",\l            reference: \"director\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l    ],\l    alias: Some(\l        \"film_xml\",\l    ),\l} \lconfig: {\l  \"path\": \"films.csv\"\l}\l             " ]
    1 [ label = "id:Source_1 \lSource Operator\ltype: File \lreference iterator: Iterator {\l    reference: None,\l    reference_formulation: CSVRows,\l    fields: [\l        Field {\l            alias: \"id\",\l            reference: \"id\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l        Field {\l            alias: \"name\",\l            reference: \"name\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l        Field {\l            alias: \"year\",\l            reference: \"year\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l        Field {\l            alias: \"comment\",\l            reference: \"comment\",\l            reference_formulation: CSVRows,\l            inner_fields: [],\l        },\l    ],\l    alias: Some(\l        \"film_json\",\l    ),\l} \lconfig: {\l  \"path\": \"film2.csv\"\l}\l             " ]
    2 [ label = "id:Rename_expression_2 \lRename Operator\lRenaming pairs:\l film_json.name -> films.name\lfilm_json.comment -> films.comment\lfilm_json.year -> films.year\lfilm_json.id -> films.id" ]
    3 [ label = "id:Extend_for_Serializer_3 \lExtension Operator\lExtended pairs: \l MyFilms_om_4 -> Iri { inner_function: TemplateFunctionValue { template: \"http://example.com/{func_value}\", variable_function_pairs: [(\"func_value\", Constant { value: \"Film\" })] } }\lMyFilms_om_0 -> Literal { inner_function: Reference { value: \"films.year\" }, dtype_function: Some(TemplateFunctionValue { template: \"http://www.w3.org/2001/XMLSchema#{func_value}\", variable_function_pairs: [(\"func_value\", Constant { value: \"gYear\" })] }), langtype_function: None }\lMyFilms_om_3 -> Literal { inner_function: Reference { value: \"films.directors\" }, dtype_function: None, langtype_function: None }\lMyFilms_om_1 -> Literal { inner_function: Reference { value: \"films.name\" }, dtype_function: None, langtype_function: None }\lMyFilms_sm_0 -> Iri { inner_function: TemplateFunctionValue { template: \"http://example.com/{func_value}\", variable_function_pairs: [(\"func_value\", Reference { value: \"films.id\" })] } }\lMyFilms_om_2 -> Literal { inner_function: Reference { value: \"films.country\" }, dtype_function: None, langtype_function: None }" ]
    4 [ label = "id:Serialize_4 \lSerializer Operator\lFormat type: NQuads\lTemplate: ?MyFilms_sm_0 <http://example.com/year> ?MyFilms_om_0 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/name> ?MyFilms_om_1 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/country> ?MyFilms_om_2 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/director> ?MyFilms_om_3 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/type> ?MyFilms_om_4 <http://example.com/MyFilms> ." ]
    5 [ label = "id:Sink_5 \lTarget Operator\ltype: StdOut \ldata format: NQuads \lconfig: {}\l             " ]
    6 [ label = "id:Rename_expression_6 \lRename Operator\lRenaming pairs:\l film_xml.country -> films.country\lfilm_xml.id -> films.id\lfilm_xml.directors -> films.directors\lfilm_xml.name -> films.name\lfilm_xml.year -> films.year" ]
    7 [ label = "id:Extend_for_Serializer_7 \lExtension Operator\lExtended pairs: \l MyFilms_om_1 -> Literal { inner_function: Reference { value: \"films.name\" }, dtype_function: None, langtype_function: None }\lMyFilms_om_2 -> Literal { inner_function: Reference { value: \"films.country\" }, dtype_function: None, langtype_function: None }\lMyFilms_om_4 -> Iri { inner_function: TemplateFunctionValue { template: \"http://example.com/{func_value}\", variable_function_pairs: [(\"func_value\", Constant { value: \"Film\" })] } }\lMyFilms_om_0 -> Literal { inner_function: Reference { value: \"films.year\" }, dtype_function: Some(TemplateFunctionValue { template: \"http://www.w3.org/2001/XMLSchema#{func_value}\", variable_function_pairs: [(\"func_value\", Constant { value: \"gYear\" })] }), langtype_function: None }\lMyFilms_sm_0 -> Iri { inner_function: TemplateFunctionValue { template: \"http://example.com/{func_value}\", variable_function_pairs: [(\"func_value\", Reference { value: \"films.id\" })] } }\lMyFilms_om_3 -> Literal { inner_function: Reference { value: \"films.directors\" }, dtype_function: None, langtype_function: None }" ]
    8 [ label = "id:Serialize_8 \lSerializer Operator\lFormat type: NQuads\lTemplate: ?MyFilms_sm_0 <http://example.com/year> ?MyFilms_om_0 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/name> ?MyFilms_om_1 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/country> ?MyFilms_om_2 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/director> ?MyFilms_om_3 <http://example.com/MyFilms> .\l?MyFilms_sm_0 <http://example.com/type> ?MyFilms_om_4 <http://example.com/MyFilms> ." ]
    9 [ label = "id:Sink_9 \lTarget Operator\ltype: StdOut \ldata format: NQuads \lconfig: {}\l             " ]
    1 -> 2 [ label = "Fragment:default" ]
    2 -> 3 [ label = "Fragment:default" ]
    3 -> 4 [ label = "Fragment:default" ]
    4 -> 5 [ label = "Fragment:default" ]
    0 -> 6 [ label = "Fragment:default" ]
    6 -> 7 [ label = "Fragment:default" ]
    7 -> 8 [ label = "Fragment:default" ]
    8 -> 9 [ label = "Fragment:default" ]
}
